{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","settext","style","color","heading","backgroundColor","onChange","event","target","value","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.6835dcf7.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <>\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" to=\"/about\">{props.aboutText}</a>\r\n        </li> */}\r\n        \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n    </div> */}\r\n  </div>\r\n\r\n\r\n\r\n  <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">enable dark mode</label>\r\n</div>\r\n\r\n\r\n</div>\r\n\r\n\r\n</nav>\r\n</>\r\n    )\r\n   \r\n}\r\nNavbar.propTypes= {\r\n    title: PropTypes.string, \r\n    aboutText:PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"set title here\",\r\n    aboutText: \"About\"\r\n}\r\n    \r\n\r\n\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    // console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    settext(newText);\r\n    props.showAlert(\"Text converted to uppercase\", \"success\")\r\n  };\r\n\r\n  // const [myStyle, setmyStyle] = useState({\r\n\r\n  // })\r\n  const CopyText = () => {\r\n    let newText = document.getElementById(\"mybox\");\r\n    newText.select();\r\n    navigator.clipboard.writeText(newText.value);\r\n    props.showAlert(\"Text Copied\", \"success\")\r\n  };\r\n  // const ClrChange=()=>{\r\n\r\n  //     setmyStyle({\r\n\r\n  //         color:'green'\r\n  //     })\r\n  // }\r\n\r\n  const handleLoClick = () => {\r\n    // console.log(\"Lowercase ase was clicked was clicked\" + text);\r\n    let newText = text.toLowerCase();\r\n    settext(newText);\r\n    props.showAlert(\"converted to lowercase\", \"success\")\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"on change\");\r\n    settext(event.target.value);\r\n  };\r\n  const [text, settext] = useState(\"\");\r\n  return (\r\n    <>\r\n      <div\r\n        className=\"container\"\r\n        style={{ color: props.mode === \"dark\" ? \"white\" : \"black\" }}\r\n      >\r\n        <h1 >{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"mybox\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color:props.mode ===\"dark\" ? \"white\" : \"black\"\r\n            }}\r\n            onChange={handleOnChange}\r\n            value={text}\r\n            rows=\"8\"\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleLoClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        {/* <button className=\"btn btn-primary mx-2\" onClick={ClrChange}>Change the color</button> */}\r\n        <button className=\"btn btn-primary mx-2\" onClick={CopyText}>\r\n          Copy Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\"  style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color:props.mode ===\"dark\" ? \"white\" : \"black\"\r\n            }}>\r\n        <h1>Your text summary</h1>\r\n        <p>\r\n          {text.split(\" \").length} Words and {text.length} characters\r\n        </p>\r\n        <p>{0.0008 * text.split(\" \").length}minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"enter something to preview it\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n         <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  \r\n</div>\r\n    \r\n    )\r\n}\r\n\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\n// import About from './Components/About';\nimport React, { useState } from 'react'\nimport Alert from './Components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null);\n  \n\n  const showAlert= (message, type)=>{\n    setAlert({ msg: message,\n    type: type});\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const toggleMode=()=>{\nif(mode==='light')\n{                \n  setMode('dark');\n  showAlert(\"Dark mode has been enabled\", \"success\");\n  document.body.style.backgroundColor='grey';\n}\nelse{\n  setMode('light');\n  document.body.style.backgroundColor='white';\n  showAlert(\"light mode has been enabled\", \"success\");\n}\n\n}\n\n  \n  return (\n\n<>\n\n{/* <Router> */}\n<Navbar title=\"Textutills\" mode={mode} toggleMode={toggleMode}/>\n<Alert alert={alert}/>\n\n  <div className=\"container my-3\">\n            \n{/* <Switch>\n          <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n          {/* </Route> \n        </Switch>\n        </div>\n         */}\n{/* </Router> */}\n</div>\n</>\n\n \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}